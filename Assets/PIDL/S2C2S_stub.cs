




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

using System;
using System.Net;	     

namespace S2C2S
{
	internal class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

		public delegate bool RequestLoginDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String id, System.String password);  
		public RequestLoginDelegate RequestLogin = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String id, System.String password)
		{ 
			return false;
		};
		public delegate bool NotifyLoginSuccessDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public NotifyLoginSuccessDelegate NotifyLoginSuccess = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool NotifyLoginFailedDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String reason);  
		public NotifyLoginFailedDelegate NotifyLoginFailed = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String reason)
		{ 
			return false;
		};
		public delegate bool JoinGameRoomDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int character_num);  
		public JoinGameRoomDelegate JoinGameRoom = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int character_num)
		{ 
			return false;
		};
		public delegate bool LeaveGameRoomDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public LeaveGameRoomDelegate LeaveGameRoom = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool Room_AppearDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int hostID, System.String id, int character_num, System.String team_color, int team_num);  
		public Room_AppearDelegate Room_Appear = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int hostID, System.String id, int character_num, System.String team_color, int team_num)
		{ 
			return false;
		};
		public delegate bool Room_DisappearDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int team_num);  
		public Room_DisappearDelegate Room_Disappear = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int team_num)
		{ 
			return false;
		};
		public delegate bool GameStartDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public GameStartDelegate GameStart = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool PlayerInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int team_num, int character_num, float px, float py, float pz, float rx, float ry, float rz);  
		public PlayerInfoDelegate PlayerInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int team_num, int character_num, float px, float py, float pz, float rx, float ry, float rz)
		{ 
			return false;
		};
		public delegate bool Player_MoveDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int m_team_num, float m_move, float m_rotate, bool m_reload, float px, float py, float pz, float rx, float ry, float rz);  
		public Player_MoveDelegate Player_Move = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int m_team_num, float m_move, float m_rotate, bool m_reload, float px, float py, float pz, float rx, float ry, float rz)
		{ 
			return false;
		};
		public delegate bool Player_ChatDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String id, System.String text);  
		public Player_ChatDelegate Player_Chat = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String id, System.String text)
		{ 
			return false;
		};
		public delegate bool Player_ShootDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int m_team_num, float bx, float by, float bz, int kind);  
		public Player_ShootDelegate Player_Shoot = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int m_team_num, float bx, float by, float bz, int kind)
		{ 
			return false;
		};
		public delegate bool Player_GetHPDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int m_humidity);  
		public Player_GetHPDelegate Player_GetHP = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int m_humidity)
		{ 
			return false;
		};
		public delegate bool Player_SetHPDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int m_team_num, int m_damage);  
		public Player_SetHPDelegate Player_SetHP = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int m_team_num, int m_damage)
		{ 
			return false;
		};
		public delegate bool Show_Player_ColorDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int m_team_num, int m_humidity, float m_Max_humidity);  
		public Show_Player_ColorDelegate Show_Player_Color = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int m_team_num, int m_humidity, float m_Max_humidity)
		{ 
			return false;
		};
		public delegate bool Room_weatherDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String _weather);  
		public Room_weatherDelegate Room_weather = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String _weather)
		{ 
			return false;
		};
		public delegate bool Room_ItemDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int idx, float ix, float iy, float iz);  
		public Room_ItemDelegate Room_Item = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int idx, float ix, float iy, float iz)
		{ 
			return false;
		};
		public delegate bool Del_ItemDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String name);  
		public Del_ItemDelegate Del_Item = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String name)
		{ 
			return false;
		};
	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
					
		switch(__rmiID)
		{
        case Common.RequestLogin:
            ProcessReceivedMessage_RequestLogin(__msg, pa, hostTag, remote);
            break;
        case Common.NotifyLoginSuccess:
            ProcessReceivedMessage_NotifyLoginSuccess(__msg, pa, hostTag, remote);
            break;
        case Common.NotifyLoginFailed:
            ProcessReceivedMessage_NotifyLoginFailed(__msg, pa, hostTag, remote);
            break;
        case Common.JoinGameRoom:
            ProcessReceivedMessage_JoinGameRoom(__msg, pa, hostTag, remote);
            break;
        case Common.LeaveGameRoom:
            ProcessReceivedMessage_LeaveGameRoom(__msg, pa, hostTag, remote);
            break;
        case Common.Room_Appear:
            ProcessReceivedMessage_Room_Appear(__msg, pa, hostTag, remote);
            break;
        case Common.Room_Disappear:
            ProcessReceivedMessage_Room_Disappear(__msg, pa, hostTag, remote);
            break;
        case Common.GameStart:
            ProcessReceivedMessage_GameStart(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerInfo:
            ProcessReceivedMessage_PlayerInfo(__msg, pa, hostTag, remote);
            break;
        case Common.Player_Move:
            ProcessReceivedMessage_Player_Move(__msg, pa, hostTag, remote);
            break;
        case Common.Player_Chat:
            ProcessReceivedMessage_Player_Chat(__msg, pa, hostTag, remote);
            break;
        case Common.Player_Shoot:
            ProcessReceivedMessage_Player_Shoot(__msg, pa, hostTag, remote);
            break;
        case Common.Player_GetHP:
            ProcessReceivedMessage_Player_GetHP(__msg, pa, hostTag, remote);
            break;
        case Common.Player_SetHP:
            ProcessReceivedMessage_Player_SetHP(__msg, pa, hostTag, remote);
            break;
        case Common.Show_Player_Color:
            ProcessReceivedMessage_Show_Player_Color(__msg, pa, hostTag, remote);
            break;
        case Common.Room_weather:
            ProcessReceivedMessage_Room_weather(__msg, pa, hostTag, remote);
            break;
        case Common.Room_Item:
            ProcessReceivedMessage_Room_Item(__msg, pa, hostTag, remote);
            break;
        case Common.Del_Item:
            ProcessReceivedMessage_Del_Item(__msg, pa, hostTag, remote);
            break;
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
    void ProcessReceivedMessage_RequestLogin(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.String id; Nettention.Proud.Marshaler.Read(__msg,out id);	
System.String password; Nettention.Proud.Marshaler.Read(__msg,out password);	
core.PostCheckReadMessage(__msg, RmiName_RequestLogin);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=id.ToString()+",";
parameterString+=password.ToString()+",";
        NotifyCallFromStub(Common.RequestLogin, RmiName_RequestLogin,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestLogin;
        summary.rmiName = RmiName_RequestLogin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestLogin (remote,ctx , id, password );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestLogin);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestLogin;
        summary.rmiName = RmiName_RequestLogin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotifyLoginSuccess(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_NotifyLoginSuccess);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.NotifyLoginSuccess, RmiName_NotifyLoginSuccess,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotifyLoginSuccess;
        summary.rmiName = RmiName_NotifyLoginSuccess;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotifyLoginSuccess (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotifyLoginSuccess);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotifyLoginSuccess;
        summary.rmiName = RmiName_NotifyLoginSuccess;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotifyLoginFailed(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.String reason; Nettention.Proud.Marshaler.Read(__msg,out reason);	
core.PostCheckReadMessage(__msg, RmiName_NotifyLoginFailed);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=reason.ToString()+",";
        NotifyCallFromStub(Common.NotifyLoginFailed, RmiName_NotifyLoginFailed,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotifyLoginFailed;
        summary.rmiName = RmiName_NotifyLoginFailed;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotifyLoginFailed (remote,ctx , reason );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotifyLoginFailed);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotifyLoginFailed;
        summary.rmiName = RmiName_NotifyLoginFailed;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_JoinGameRoom(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int character_num; Nettention.Proud.Marshaler.Read(__msg,out character_num);	
core.PostCheckReadMessage(__msg, RmiName_JoinGameRoom);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=character_num.ToString()+",";
        NotifyCallFromStub(Common.JoinGameRoom, RmiName_JoinGameRoom,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.JoinGameRoom;
        summary.rmiName = RmiName_JoinGameRoom;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =JoinGameRoom (remote,ctx , character_num );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_JoinGameRoom);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.JoinGameRoom;
        summary.rmiName = RmiName_JoinGameRoom;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_LeaveGameRoom(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_LeaveGameRoom);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.LeaveGameRoom, RmiName_LeaveGameRoom,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.LeaveGameRoom;
        summary.rmiName = RmiName_LeaveGameRoom;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =LeaveGameRoom (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_LeaveGameRoom);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.LeaveGameRoom;
        summary.rmiName = RmiName_LeaveGameRoom;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_Room_Appear(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int hostID; Nettention.Proud.Marshaler.Read(__msg,out hostID);	
System.String id; Nettention.Proud.Marshaler.Read(__msg,out id);	
int character_num; Nettention.Proud.Marshaler.Read(__msg,out character_num);	
System.String team_color; Nettention.Proud.Marshaler.Read(__msg,out team_color);	
int team_num; Nettention.Proud.Marshaler.Read(__msg,out team_num);	
core.PostCheckReadMessage(__msg, RmiName_Room_Appear);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=hostID.ToString()+",";
parameterString+=id.ToString()+",";
parameterString+=character_num.ToString()+",";
parameterString+=team_color.ToString()+",";
parameterString+=team_num.ToString()+",";
        NotifyCallFromStub(Common.Room_Appear, RmiName_Room_Appear,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.Room_Appear;
        summary.rmiName = RmiName_Room_Appear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =Room_Appear (remote,ctx , hostID, id, character_num, team_color, team_num );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_Room_Appear);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.Room_Appear;
        summary.rmiName = RmiName_Room_Appear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_Room_Disappear(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int team_num; Nettention.Proud.Marshaler.Read(__msg,out team_num);	
core.PostCheckReadMessage(__msg, RmiName_Room_Disappear);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=team_num.ToString()+",";
        NotifyCallFromStub(Common.Room_Disappear, RmiName_Room_Disappear,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.Room_Disappear;
        summary.rmiName = RmiName_Room_Disappear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =Room_Disappear (remote,ctx , team_num );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_Room_Disappear);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.Room_Disappear;
        summary.rmiName = RmiName_Room_Disappear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GameStart(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_GameStart);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.GameStart, RmiName_GameStart,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GameStart;
        summary.rmiName = RmiName_GameStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GameStart (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GameStart);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GameStart;
        summary.rmiName = RmiName_GameStart;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int team_num; Nettention.Proud.Marshaler.Read(__msg,out team_num);	
int character_num; Nettention.Proud.Marshaler.Read(__msg,out character_num);	
float px; Nettention.Proud.Marshaler.Read(__msg,out px);	
float py; Nettention.Proud.Marshaler.Read(__msg,out py);	
float pz; Nettention.Proud.Marshaler.Read(__msg,out pz);	
float rx; Nettention.Proud.Marshaler.Read(__msg,out rx);	
float ry; Nettention.Proud.Marshaler.Read(__msg,out ry);	
float rz; Nettention.Proud.Marshaler.Read(__msg,out rz);	
core.PostCheckReadMessage(__msg, RmiName_PlayerInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=team_num.ToString()+",";
parameterString+=character_num.ToString()+",";
parameterString+=px.ToString()+",";
parameterString+=py.ToString()+",";
parameterString+=pz.ToString()+",";
parameterString+=rx.ToString()+",";
parameterString+=ry.ToString()+",";
parameterString+=rz.ToString()+",";
        NotifyCallFromStub(Common.PlayerInfo, RmiName_PlayerInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerInfo;
        summary.rmiName = RmiName_PlayerInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerInfo (remote,ctx , team_num, character_num, px, py, pz, rx, ry, rz );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerInfo;
        summary.rmiName = RmiName_PlayerInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_Player_Move(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int m_team_num; Nettention.Proud.Marshaler.Read(__msg,out m_team_num);	
float m_move; Nettention.Proud.Marshaler.Read(__msg,out m_move);	
float m_rotate; Nettention.Proud.Marshaler.Read(__msg,out m_rotate);	
bool m_reload; Nettention.Proud.Marshaler.Read(__msg,out m_reload);	
float px; Nettention.Proud.Marshaler.Read(__msg,out px);	
float py; Nettention.Proud.Marshaler.Read(__msg,out py);	
float pz; Nettention.Proud.Marshaler.Read(__msg,out pz);	
float rx; Nettention.Proud.Marshaler.Read(__msg,out rx);	
float ry; Nettention.Proud.Marshaler.Read(__msg,out ry);	
float rz; Nettention.Proud.Marshaler.Read(__msg,out rz);	
core.PostCheckReadMessage(__msg, RmiName_Player_Move);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=m_team_num.ToString()+",";
parameterString+=m_move.ToString()+",";
parameterString+=m_rotate.ToString()+",";
parameterString+=m_reload.ToString()+",";
parameterString+=px.ToString()+",";
parameterString+=py.ToString()+",";
parameterString+=pz.ToString()+",";
parameterString+=rx.ToString()+",";
parameterString+=ry.ToString()+",";
parameterString+=rz.ToString()+",";
        NotifyCallFromStub(Common.Player_Move, RmiName_Player_Move,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.Player_Move;
        summary.rmiName = RmiName_Player_Move;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =Player_Move (remote,ctx , m_team_num, m_move, m_rotate, m_reload, px, py, pz, rx, ry, rz );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_Player_Move);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.Player_Move;
        summary.rmiName = RmiName_Player_Move;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_Player_Chat(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.String id; Nettention.Proud.Marshaler.Read(__msg,out id);	
System.String text; Nettention.Proud.Marshaler.Read(__msg,out text);	
core.PostCheckReadMessage(__msg, RmiName_Player_Chat);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=id.ToString()+",";
parameterString+=text.ToString()+",";
        NotifyCallFromStub(Common.Player_Chat, RmiName_Player_Chat,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.Player_Chat;
        summary.rmiName = RmiName_Player_Chat;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =Player_Chat (remote,ctx , id, text );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_Player_Chat);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.Player_Chat;
        summary.rmiName = RmiName_Player_Chat;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_Player_Shoot(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int m_team_num; Nettention.Proud.Marshaler.Read(__msg,out m_team_num);	
float bx; Nettention.Proud.Marshaler.Read(__msg,out bx);	
float by; Nettention.Proud.Marshaler.Read(__msg,out by);	
float bz; Nettention.Proud.Marshaler.Read(__msg,out bz);	
int kind; Nettention.Proud.Marshaler.Read(__msg,out kind);	
core.PostCheckReadMessage(__msg, RmiName_Player_Shoot);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=m_team_num.ToString()+",";
parameterString+=bx.ToString()+",";
parameterString+=by.ToString()+",";
parameterString+=bz.ToString()+",";
parameterString+=kind.ToString()+",";
        NotifyCallFromStub(Common.Player_Shoot, RmiName_Player_Shoot,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.Player_Shoot;
        summary.rmiName = RmiName_Player_Shoot;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =Player_Shoot (remote,ctx , m_team_num, bx, by, bz, kind );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_Player_Shoot);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.Player_Shoot;
        summary.rmiName = RmiName_Player_Shoot;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_Player_GetHP(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int m_humidity; Nettention.Proud.Marshaler.Read(__msg,out m_humidity);	
core.PostCheckReadMessage(__msg, RmiName_Player_GetHP);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=m_humidity.ToString()+",";
        NotifyCallFromStub(Common.Player_GetHP, RmiName_Player_GetHP,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.Player_GetHP;
        summary.rmiName = RmiName_Player_GetHP;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =Player_GetHP (remote,ctx , m_humidity );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_Player_GetHP);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.Player_GetHP;
        summary.rmiName = RmiName_Player_GetHP;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_Player_SetHP(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int m_team_num; Nettention.Proud.Marshaler.Read(__msg,out m_team_num);	
int m_damage; Nettention.Proud.Marshaler.Read(__msg,out m_damage);	
core.PostCheckReadMessage(__msg, RmiName_Player_SetHP);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=m_team_num.ToString()+",";
parameterString+=m_damage.ToString()+",";
        NotifyCallFromStub(Common.Player_SetHP, RmiName_Player_SetHP,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.Player_SetHP;
        summary.rmiName = RmiName_Player_SetHP;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =Player_SetHP (remote,ctx , m_team_num, m_damage );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_Player_SetHP);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.Player_SetHP;
        summary.rmiName = RmiName_Player_SetHP;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_Show_Player_Color(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int m_team_num; Nettention.Proud.Marshaler.Read(__msg,out m_team_num);	
int m_humidity; Nettention.Proud.Marshaler.Read(__msg,out m_humidity);	
float m_Max_humidity; Nettention.Proud.Marshaler.Read(__msg,out m_Max_humidity);	
core.PostCheckReadMessage(__msg, RmiName_Show_Player_Color);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=m_team_num.ToString()+",";
parameterString+=m_humidity.ToString()+",";
parameterString+=m_Max_humidity.ToString()+",";
        NotifyCallFromStub(Common.Show_Player_Color, RmiName_Show_Player_Color,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.Show_Player_Color;
        summary.rmiName = RmiName_Show_Player_Color;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =Show_Player_Color (remote,ctx , m_team_num, m_humidity, m_Max_humidity );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_Show_Player_Color);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.Show_Player_Color;
        summary.rmiName = RmiName_Show_Player_Color;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_Room_weather(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.String _weather; Nettention.Proud.Marshaler.Read(__msg,out _weather);	
core.PostCheckReadMessage(__msg, RmiName_Room_weather);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=_weather.ToString()+",";
        NotifyCallFromStub(Common.Room_weather, RmiName_Room_weather,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.Room_weather;
        summary.rmiName = RmiName_Room_weather;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =Room_weather (remote,ctx , _weather );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_Room_weather);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.Room_weather;
        summary.rmiName = RmiName_Room_weather;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_Room_Item(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int idx; Nettention.Proud.Marshaler.Read(__msg,out idx);	
float ix; Nettention.Proud.Marshaler.Read(__msg,out ix);	
float iy; Nettention.Proud.Marshaler.Read(__msg,out iy);	
float iz; Nettention.Proud.Marshaler.Read(__msg,out iz);	
core.PostCheckReadMessage(__msg, RmiName_Room_Item);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=idx.ToString()+",";
parameterString+=ix.ToString()+",";
parameterString+=iy.ToString()+",";
parameterString+=iz.ToString()+",";
        NotifyCallFromStub(Common.Room_Item, RmiName_Room_Item,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.Room_Item;
        summary.rmiName = RmiName_Room_Item;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =Room_Item (remote,ctx , idx, ix, iy, iz );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_Room_Item);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.Room_Item;
        summary.rmiName = RmiName_Room_Item;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_Del_Item(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.String name; Nettention.Proud.Marshaler.Read(__msg,out name);	
core.PostCheckReadMessage(__msg, RmiName_Del_Item);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=name.ToString()+",";
        NotifyCallFromStub(Common.Del_Item, RmiName_Del_Item,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.Del_Item;
        summary.rmiName = RmiName_Del_Item;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =Del_Item (remote,ctx , name );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_Del_Item);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.Del_Item;
        summary.rmiName = RmiName_Del_Item;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_RequestLogin="RequestLogin";
public const string RmiName_NotifyLoginSuccess="NotifyLoginSuccess";
public const string RmiName_NotifyLoginFailed="NotifyLoginFailed";
public const string RmiName_JoinGameRoom="JoinGameRoom";
public const string RmiName_LeaveGameRoom="LeaveGameRoom";
public const string RmiName_Room_Appear="Room_Appear";
public const string RmiName_Room_Disappear="Room_Disappear";
public const string RmiName_GameStart="GameStart";
public const string RmiName_PlayerInfo="PlayerInfo";
public const string RmiName_Player_Move="Player_Move";
public const string RmiName_Player_Chat="Player_Chat";
public const string RmiName_Player_Shoot="Player_Shoot";
public const string RmiName_Player_GetHP="Player_GetHP";
public const string RmiName_Player_SetHP="Player_SetHP";
public const string RmiName_Show_Player_Color="Show_Player_Color";
public const string RmiName_Room_weather="Room_weather";
public const string RmiName_Room_Item="Room_Item";
public const string RmiName_Del_Item="Del_Item";
       
public const string RmiName_First = RmiName_RequestLogin;
#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_RequestLogin="";
public const string RmiName_NotifyLoginSuccess="";
public const string RmiName_NotifyLoginFailed="";
public const string RmiName_JoinGameRoom="";
public const string RmiName_LeaveGameRoom="";
public const string RmiName_Room_Appear="";
public const string RmiName_Room_Disappear="";
public const string RmiName_GameStart="";
public const string RmiName_PlayerInfo="";
public const string RmiName_Player_Move="";
public const string RmiName_Player_Chat="";
public const string RmiName_Player_Shoot="";
public const string RmiName_Player_GetHP="";
public const string RmiName_Player_SetHP="";
public const string RmiName_Show_Player_Color="";
public const string RmiName_Room_weather="";
public const string RmiName_Room_Item="";
public const string RmiName_Del_Item="";
       
public const string RmiName_First = "";
#endif
		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}

